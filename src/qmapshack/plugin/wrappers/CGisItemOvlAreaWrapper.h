/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CGISITEMOVLAREAWRAPPER_H
#define CGISITEMOVLAREAWRAPPER_H

#include <qobject.h>
#include "gis/ovl/CGisItemOvlArea.h"

class IGisItem;
 using selflags_t = quint32;
class IScrOpt;


class CGisItemOvlAreaWrapper : public QObject
 {
    Q_OBJECT
public slots:
    IGisItem * createClone(CGisItemOvlArea* wrappedObj) { return wrappedObj->createClone();}
    const QString& getName(CGisItemOvlArea* wrappedObj) { return wrappedObj->getName();}
    int getColorIdx(CGisItemOvlArea* wrappedObj) { return wrappedObj->getColorIdx();}
    QString getInfo(CGisItemOvlArea* wrappedObj, quint32  feature) { return wrappedObj->getInfo(feature);}
    void getPolylineFromData(CGisItemOvlArea* wrappedObj, SGisLine&  l) { return wrappedObj->getPolylineFromData(l);}
    void getPolylineDegFromData(CGisItemOvlArea* wrappedObj, QPolygonF & polygon) { return wrappedObj->getPolylineDegFromData(polygon);}
    const QString& getComment(CGisItemOvlArea* wrappedObj) { return wrappedObj->getComment();}
    const QString& getDescription(CGisItemOvlArea* wrappedObj) { return wrappedObj->getDescription();}
    qint32 getWidth(CGisItemOvlArea* wrappedObj) { return wrappedObj->getWidth();}
    qint32 getStyle(CGisItemOvlArea* wrappedObj) { return wrappedObj->getStyle();}
    bool getOpacity(CGisItemOvlArea* wrappedObj) { return wrappedObj->getOpacity();}
    QDateTime getTimestamp(CGisItemOvlArea* wrappedObj) { return wrappedObj->getTimestamp();}
    void setName(CGisItemOvlArea* wrappedObj, const QString&  str) { return wrappedObj->setName(str);}
    void setColor(CGisItemOvlArea* wrappedObj, int  idx) { return wrappedObj->setColor(idx);}
    void setDataFromPolyline(CGisItemOvlArea* wrappedObj, const SGisLine&  l) { return wrappedObj->setDataFromPolyline(l);}
    void setWidth(CGisItemOvlArea* wrappedObj, qint32  w) { return wrappedObj->setWidth(w);}
    void setStyle(CGisItemOvlArea* wrappedObj, qint32  s) { return wrappedObj->setStyle(s);}
    void setOpacity(CGisItemOvlArea* wrappedObj, bool  yes) { return wrappedObj->setOpacity(yes);}
    void setComment(CGisItemOvlArea* wrappedObj, const QString&  str) { return wrappedObj->setComment(str);}
    void setDescription(CGisItemOvlArea* wrappedObj, const QString&  str) { return wrappedObj->setDescription(str);}
    void save(CGisItemOvlArea* wrappedObj, QDomNode&  gpx, bool  strictGpx11) { return wrappedObj->save(gpx, strictGpx11);}
    void edit(CGisItemOvlArea* wrappedObj) { return wrappedObj->edit();}
    void drawHighlight(CGisItemOvlArea* wrappedObj, QPainter&  p) { return wrappedObj->drawHighlight(p);}
    IScrOpt * getScreenOptions(CGisItemOvlArea* wrappedObj, const QPoint & origin, IMouse *  mouse) { return wrappedObj->getScreenOptions(origin, mouse);}
    QPointF getPointCloseBy(CGisItemOvlArea* wrappedObj, const QPoint&  screenPos) { return wrappedObj->getPointCloseBy(screenPos);}
    bool isCloseTo(CGisItemOvlArea* wrappedObj, const QPointF&  pos) { return wrappedObj->isCloseTo(pos);}
    bool isWithin(CGisItemOvlArea* wrappedObj, const QRectF&  area, selflags_t  flags) { return wrappedObj->isWithin(area, flags);}
    void gainUserFocus(CGisItemOvlArea* wrappedObj, bool  yes) { return wrappedObj->gainUserFocus(yes);}
    const searchValue_t getValueByKeyword(CGisItemOvlArea* wrappedObj, searchProperty_e  keyword) { return wrappedObj->getValueByKeyword(keyword);}
    const CGisItemOvlArea::area_t& getAreaData(CGisItemOvlArea* wrappedObj) { return wrappedObj->getAreaData();}
}; 

#endif