/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CGISITEMRTEWRAPPER_H
#define CGISITEMRTEWRAPPER_H

#include <qobject.h>
#include "gis/rte/CGisItemRte.h"

class IGisItem;
 using selflags_t = quint32;
class IScrOpt;


class CGisItemRteWrapper : public QObject
 {
    Q_OBJECT
public slots:
    IGisItem * createClone(CGisItemRte* wrappedObj) { return wrappedObj->createClone();}
    const QString& getName(CGisItemRte* wrappedObj) { return wrappedObj->getName();}
    QString getInfo(CGisItemRte* wrappedObj, quint32  feature) { return wrappedObj->getInfo(feature);}
    IScrOpt * getScreenOptions(CGisItemRte* wrappedObj, const QPoint & origin, IMouse *  mouse) { return wrappedObj->getScreenOptions(origin, mouse);}
    QPointF getPointCloseBy(CGisItemRte* wrappedObj, const QPoint&  screenPos) { return wrappedObj->getPointCloseBy(screenPos);}
    void drawItem(CGisItemRte* wrappedObj, QPainter&  p, const QRectF&  viewport, CGisDraw *  gis) { return wrappedObj->drawItem(p, viewport, gis);}
    void drawHighlight(CGisItemRte* wrappedObj, QPainter&  p) { return wrappedObj->drawHighlight(p);}
    void save(CGisItemRte* wrappedObj, QDomNode&  gpx, bool  strictGpx11) { return wrappedObj->save(gpx, strictGpx11);}
    bool isCloseTo(CGisItemRte* wrappedObj, const QPointF&  pos) { return wrappedObj->isCloseTo(pos);}
    bool isWithin(CGisItemRte* wrappedObj, const QRectF&  area, selflags_t  flags) { return wrappedObj->isWithin(area, flags);}
    void gainUserFocus(CGisItemRte* wrappedObj, bool  yes) { return wrappedObj->gainUserFocus(yes);}
    void looseUserFocus(CGisItemRte* wrappedObj) { return wrappedObj->looseUserFocus();}
    bool hasUserFocus(CGisItemRte* wrappedObj) { return wrappedObj->hasUserFocus();}
    void setDataFromPolyline(CGisItemRte* wrappedObj, const SGisLine&  l) { return wrappedObj->setDataFromPolyline(l);}
    void getPolylineFromData(CGisItemRte* wrappedObj, SGisLine & l) { return wrappedObj->getPolylineFromData(l);}
    void getPolylineDegFromData(CGisItemRte* wrappedObj, QPolygonF & polygon) { return wrappedObj->getPolylineDegFromData(polygon);}
    const QString& getComment(CGisItemRte* wrappedObj) { return wrappedObj->getComment();}
    const QString& getDescription(CGisItemRte* wrappedObj) { return wrappedObj->getDescription();}
    const CGisItemRte::rte_t& getRoute(CGisItemRte* wrappedObj) { return wrappedObj->getRoute();}
    QDateTime getTimestamp(CGisItemRte* wrappedObj) { return wrappedObj->getTimestamp();}
    void setName(CGisItemRte* wrappedObj, const QString&  str) { return wrappedObj->setName(str);}
    void setComment(CGisItemRte* wrappedObj, const QString&  str) { return wrappedObj->setComment(str);}
    void setDescription(CGisItemRte* wrappedObj, const QString&  str) { return wrappedObj->setDescription(str);}
    void calc(CGisItemRte* wrappedObj) { return wrappedObj->calc();}
    void reset(CGisItemRte* wrappedObj) { return wrappedObj->reset();}
    void edit(CGisItemRte* wrappedObj) { return wrappedObj->edit();}
    void reverse(CGisItemRte* wrappedObj) { return wrappedObj->reverse();}
    void toTrack(CGisItemRte* wrappedObj) { return wrappedObj->toTrack();}
    QPointF setMouseFocusByPoint(CGisItemRte* wrappedObj, const QPoint&  pt, CGisItemRte::focusmode_e  fmode, const QString & owner) { return wrappedObj->setMouseFocusByPoint(pt, fmode, owner);}
    void setResult(CGisItemRte* wrappedObj, Routino_Output *  route, const QString & options) { return wrappedObj->setResult(route, options);}
    void setResult(CGisItemRte* wrappedObj, const QDomDocument&  xml, const QString & options) { return wrappedObj->setResult(xml, options);}
    void setResultFromBRouter(CGisItemRte* wrappedObj, const QDomDocument&  xml, const QString & options) { return wrappedObj->setResultFromBRouter(xml, options);}
    bool isCalculated(CGisItemRte* wrappedObj) { return wrappedObj->isCalculated();}
    const searchValue_t getValueByKeyword(CGisItemRte* wrappedObj, searchProperty_e  keyword) { return wrappedObj->getValueByKeyword(keyword);}
}; 

#endif