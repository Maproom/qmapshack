/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CGISITEMWPTWRAPPER_H
#define CGISITEMWPTWRAPPER_H

#include <qobject.h>
#include "gis/wpt/CGisItemWpt.h"

class IGisItem;
 using selflags_t = quint32;
class IScrOpt;


class CGisItemWptWrapper : public QObject
 {
    Q_OBJECT
public slots:
    IGisItem * createClone(CGisItemWpt* wrappedObj) { return wrappedObj->createClone();}
    void save(CGisItemWpt* wrappedObj, QDomNode&  gpx, bool  strictGpx11) { return wrappedObj->save(gpx, strictGpx11);}
    void saveTwoNav(CGisItemWpt* wrappedObj, QTextStream & out, const QDir & dir) { return wrappedObj->saveTwoNav(out, dir);}
    void saveTCX(CGisItemWpt* wrappedObj, QDomNode&  courseNode, const QDateTime  crsPtDateTimeToBeSaved) { return wrappedObj->saveTCX(courseNode, crsPtDateTimeToBeSaved);}
    void setName(CGisItemWpt* wrappedObj, const QString&  str) { return wrappedObj->setName(str);}
    void setPosition(CGisItemWpt* wrappedObj, const QPointF&  pos) { return wrappedObj->setPosition(pos);}
    void setElevation(CGisItemWpt* wrappedObj, qint32  val) { return wrappedObj->setElevation(val);}
    void setProximity(CGisItemWpt* wrappedObj, qreal  val) { return wrappedObj->setProximity(val);}
    void setIcon(CGisItemWpt* wrappedObj, const QString&  name) { return wrappedObj->setIcon(name);}
    void setComment(CGisItemWpt* wrappedObj, const QString&  str) { return wrappedObj->setComment(str);}
    void setDescription(CGisItemWpt* wrappedObj, const QString&  str) { return wrappedObj->setDescription(str);}
    void addImage(CGisItemWpt* wrappedObj, const CGisItemWpt::image_t&  img) { return wrappedObj->addImage(img);}
    const QString& getName(CGisItemWpt* wrappedObj) { return wrappedObj->getName();}
    QString getInfo(CGisItemWpt* wrappedObj, quint32  feature) { return wrappedObj->getInfo(feature);}
    QPointF getPosition(CGisItemWpt* wrappedObj) { return wrappedObj->getPosition();}
    qint32 getElevation(CGisItemWpt* wrappedObj) { return wrappedObj->getElevation();}
    qreal getProximity(CGisItemWpt* wrappedObj) { return wrappedObj->getProximity();}
    const QDateTime& getTime(CGisItemWpt* wrappedObj) { return wrappedObj->getTime();}
    const QString& getIconName(CGisItemWpt* wrappedObj) { return wrappedObj->getIconName();}
    const QString& getComment(CGisItemWpt* wrappedObj) { return wrappedObj->getComment();}
    const QString& getDescription(CGisItemWpt* wrappedObj) { return wrappedObj->getDescription();}
    const CGisItemWpt::geocache_t& getGeoCache(CGisItemWpt* wrappedObj) { return wrappedObj->getGeoCache();}
    QDateTime getTimestamp(CGisItemWpt* wrappedObj) { return wrappedObj->getTimestamp();}
    IScrOpt* getScreenOptions(CGisItemWpt* wrappedObj, const QPoint & origin, IMouse *  mouse) { return wrappedObj->getScreenOptions(origin, mouse);}
    QPointF getPointCloseBy(CGisItemWpt* wrappedObj, const QPoint&  point) { return wrappedObj->getPointCloseBy(point);}
    void drawItem(CGisItemWpt* wrappedObj, QPainter&  p, const QRectF&  viewport, CGisDraw *  gis) { return wrappedObj->drawItem(p, viewport, gis);}
    void drawHighlight(CGisItemWpt* wrappedObj, QPainter&  p) { return wrappedObj->drawHighlight(p);}
    bool isCloseTo(CGisItemWpt* wrappedObj, const QPointF&  pos) { return wrappedObj->isCloseTo(pos);}
    bool isWithin(CGisItemWpt* wrappedObj, const QRectF & area, selflags_t  flags) { return wrappedObj->isWithin(area, flags);}
    void mouseMove(CGisItemWpt* wrappedObj, const QPointF&  pos) { return wrappedObj->mouseMove(pos);}
    void mouseDragged(CGisItemWpt* wrappedObj, const QPoint&  start, const QPoint&  last, const QPoint&  pos) { return wrappedObj->mouseDragged(start, last, pos);}
    void dragFinished(CGisItemWpt* wrappedObj, const QPoint&  pos) { return wrappedObj->dragFinished(pos);}
    void leftClicked(CGisItemWpt* wrappedObj, const QPoint&  pos) { return wrappedObj->leftClicked(pos);}
    bool isGeocache(CGisItemWpt* wrappedObj) { return wrappedObj->isGeocache();}
    bool hasRadius(CGisItemWpt* wrappedObj) { return wrappedObj->hasRadius();}
    qreal getRadius(CGisItemWpt* wrappedObj) { return wrappedObj->getRadius();}
    void gainUserFocus(CGisItemWpt* wrappedObj, bool  yes) { return wrappedObj->gainUserFocus(yes);}
    void edit(CGisItemWpt* wrappedObj) { return wrappedObj->edit();}
    void editInitial(CGisItemWpt* wrappedObj) { return wrappedObj->editInitial();}
    void removeLinksByType(CGisItemWpt* wrappedObj, const QString&  type) { return wrappedObj->removeLinksByType(type);}
    void toggleBubble(CGisItemWpt* wrappedObj) { return wrappedObj->toggleBubble();}
    bool hasBubble(CGisItemWpt* wrappedObj) { return wrappedObj->hasBubble();}
    void setHideArea(CGisItemWpt* wrappedObj, bool  hide) { return wrappedObj->setHideArea(hide);}
    void genKey(CGisItemWpt* wrappedObj) { return wrappedObj->genKey();}
    const searchValue_t getValueByKeyword(CGisItemWpt* wrappedObj, searchProperty_e  keyword) { return wrappedObj->getValueByKeyword(keyword);}
    static QString getLastName(CGisItemWpt* wrappedObj, const QString & name) { return wrappedObj->getLastName(name);}
    static void newWpt(CGisItemWpt* wrappedObj, QPointF&  pt, const QString&  name, const QString&  desc, IGisProject * project) { return wrappedObj->newWpt(pt, name, desc, project);}
    static bool getIconAndName(CGisItemWpt* wrappedObj, QString&  icon, QString&  name) { return wrappedObj->getIconAndName(icon, name);}
    static void drawCircle(CGisItemWpt* wrappedObj, QPainter&  p, const QPointF&  pos, const qreal&  r, const bool & avoid, const bool & selected) { return wrappedObj->drawCircle(p, pos, r, avoid, selected);}
    static qreal calcRadius(CGisItemWpt* wrappedObj, const QPointF&  posRad, const QPointF&  posPx, const qreal&  radiusRad, CGisDraw * gis) { return wrappedObj->calcRadius(posRad, posPx, radiusRad, gis);}
    static void init(CGisItemWpt* wrappedObj) { return wrappedObj->init();}
}; 

#endif