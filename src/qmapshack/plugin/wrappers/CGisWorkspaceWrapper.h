/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CGISWORKSPACEWRAPPER_H
#define CGISWORKSPACEWRAPPER_H

#include <qobject.h>
#include "gis/CGisWorkspace.h"

class CGisWorkspace;
class IGisProject;
class CSearch;


class CEvtD2WReqInfoWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WShowFolderWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WHideFolderWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WShowItemsWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WHideItemsWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtW2DAckInfoWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WUpdateLnFWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtW2DCreateWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WUpdateItemsWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtD2WReloadWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtA2WCutTrkWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CEvtA2WSaveWrapper : public QObject
 {
    Q_OBJECT
public slots:
};

class CGisWorkspaceWrapper : public QObject
 {
    Q_OBJECT
public slots:
    static ::CGisWorkspace& self(CGisWorkspace* wrappedObj) { return wrappedObj->self();}
    void loadGisProject(CGisWorkspace* wrappedObj, const QString&  filename) { return wrappedObj->loadGisProject(filename);}
    void draw(CGisWorkspace* wrappedObj, QPainter&  p, const QPolygonF & viewport, CGisDraw * gis) { return wrappedObj->draw(p, viewport, gis);}
    void mouseMove(CGisWorkspace* wrappedObj, const QPointF&  pos) { return wrappedObj->mouseMove(pos);}
    void fastDraw(CGisWorkspace* wrappedObj, QPainter&  p, const QRectF&  viewport, CGisDraw * gis) { return wrappedObj->fastDraw(p, viewport, gis);}
    IGisProject * selectProject(CGisWorkspace* wrappedObj, bool  forceSelect) { return wrappedObj->selectProject(forceSelect);}
    void postEventForWks(CGisWorkspace* wrappedObj, QEvent *  event) { return wrappedObj->postEventForWks(event);}
    void setOpacity(CGisWorkspace* wrappedObj, qreal  val) { return wrappedObj->setOpacity(val);}
    bool findPolylineCloseBy(CGisWorkspace* wrappedObj, const QPointF&  pt1, const QPointF&  pt2, qint32  threshold, QPolygonF&  polyline) { return wrappedObj->findPolylineCloseBy(pt1, pt2, threshold, polyline);}
    bool areTagsHidden(CGisWorkspace* wrappedObj) { return wrappedObj->areTagsHidden();}
    void setTagsHidden(CGisWorkspace* wrappedObj, bool  hidden) { return wrappedObj->setTagsHidden(hidden);}
    const CSearch& getCurrentSearch(CGisWorkspace* wrappedObj) { return wrappedObj->getCurrentSearch();}
    void slotLateInit(CGisWorkspace* wrappedObj) { return wrappedObj->slotLateInit();}
    void slotSaveAll(CGisWorkspace* wrappedObj) { return wrappedObj->slotSaveAll();}
    void slotWksItemSelectionReset(CGisWorkspace* wrappedObj) { return wrappedObj->slotWksItemSelectionReset();}
}; 

#endif