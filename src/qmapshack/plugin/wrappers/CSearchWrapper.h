/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CSEARCHWRAPPER_H
#define CSEARCHWRAPPER_H

#include <qobject.h>
#include "gis/search/CSearch.h"



class CSearchWrapper : public QObject
 {
    Q_OBJECT
public slots:
    CSearch::search_type_e getSearchType(CSearch* wrappedObj, QString  keyword) { return wrappedObj->getSearchType(keyword);}
    bool getSyntaxError(CSearch* wrappedObj) { return wrappedObj->getSyntaxError();}
    bool isAutodetectedProperty(CSearch* wrappedObj) { return wrappedObj->isAutodetectedProperty();}
    const QString& getSearchText(CSearch* wrappedObj) { return wrappedObj->getSearchText();}
    static QStringList getSearchTypeKeywords(CSearch* wrappedObj) { return wrappedObj->getSearchTypeKeywords();}
    static QString getSearchTypeExample(CSearch* wrappedObj, QString  searchType) { return wrappedObj->getSearchTypeExample(searchType);}
    static QStringList getSearchPropertyKeywords(CSearch* wrappedObj) { return wrappedObj->getSearchPropertyKeywords();}
    static QString getSearchPropertyMeaning(CSearch* wrappedObj, QString  property) { return wrappedObj->getSearchPropertyMeaning(property);}
    bool getSearchResult(CSearch* wrappedObj, IGisItem *  item) { return wrappedObj->getSearchResult(item);}
    static CSearch::search_mode_e getSearchMode(CSearch* wrappedObj) { return wrappedObj->getSearchMode();}
    static void setSearchMode(CSearch* wrappedObj, const CSearch::search_mode_e & value) { return wrappedObj->setSearchMode(value);}
    static void init(CSearch* wrappedObj) { return wrappedObj->init();}
}; 

#endif