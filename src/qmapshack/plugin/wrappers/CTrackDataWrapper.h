/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef CTRACKDATAWRAPPER_H
#define CTRACKDATAWRAPPER_H

#include <qobject.h>
#include "gis/trk/CTrackData.h"



class CTrackDataWrapper : public QObject
 {
    Q_OBJECT
public slots:
    void removeEmptySegments(CTrackData* wrappedObj) { return wrappedObj->removeEmptySegments();}
    void readFrom(CTrackData* wrappedObj, const SGisLine & l) { return wrappedObj->readFrom(l);}
    void getPolyline(CTrackData* wrappedObj, SGisLine  & l) { return wrappedObj->getPolyline(l);}
    void getPolyline(CTrackData* wrappedObj, QPolygonF & l) { return wrappedObj->getPolyline(l);}
    void getPolylineDeg(CTrackData* wrappedObj, QPolygonF & l) { return wrappedObj->getPolylineDeg(l);}
    bool isEmpty(CTrackData* wrappedObj) { return wrappedObj->isEmpty();}
    bool isTrkPtFirstVisible(CTrackData* wrappedObj, qint32  idxTotal) { return wrappedObj->isTrkPtFirstVisible(idxTotal);}
    bool isTrkPtLastVisible(CTrackData* wrappedObj, qint32  idxTotal) { return wrappedObj->isTrkPtLastVisible(idxTotal);}
    bool setTrkPtDesc(CTrackData* wrappedObj, int  idxTotal, const QString&  desc) { return wrappedObj->setTrkPtDesc(idxTotal, desc);}
    const CTrackData::trkpt_t * last(CTrackData* wrappedObj) { return wrappedObj->last();}
};

class iteratorWrapper : public QObject
 {
    Q_OBJECT
public slots:
}; 

#endif