/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef IDBFOLDERWRAPPER_H
#define IDBFOLDERWRAPPER_H

#include <qobject.h>
#include "gis/db/IDBFolder.h"

class IDBFolderSql;
class IDBFolder;
class IDBFolder;


class IDBFolderWrapper : public QObject
 {
    Q_OBJECT
public slots:
    quint64 getId(IDBFolder* wrappedObj) { return wrappedObj->getId();}
    QString getDBName(IDBFolder* wrappedObj) { return wrappedObj->getDBName();}
    QString getDBHost(IDBFolder* wrappedObj) { return wrappedObj->getDBHost();}
    QSqlDatabase& getDb(IDBFolder* wrappedObj) { return wrappedObj->getDb();}
    QString getName(IDBFolder* wrappedObj) { return wrappedObj->getName();}
    void setName(IDBFolder* wrappedObj, const QString&  name) { return wrappedObj->setName(name);}
    IDBFolderSql * getDBFolder(IDBFolder* wrappedObj) { return wrappedObj->getDBFolder();}
    ::IDBFolder * getFolder(IDBFolder* wrappedObj, quint64  idFolder) { return wrappedObj->getFolder(idFolder);}
    virtual quint64 addFolder(IDBFolder* wrappedObj, IDBFolder::type_e  type, const QString & name) { return wrappedObj->addFolder(type, name);}
    virtual void expanding(IDBFolder* wrappedObj) { return wrappedObj->expanding();}
    virtual void update(IDBFolder* wrappedObj, CEvtW2DAckInfo *  info) { return wrappedObj->update(info);}
    virtual bool update(IDBFolder* wrappedObj) { return wrappedObj->update();}
    virtual void toggle(IDBFolder* wrappedObj) { return wrappedObj->toggle();}
    virtual void remove(IDBFolder* wrappedObj) { return wrappedObj->remove();}
    static quint64 addFolderToDb(IDBFolder* wrappedObj, IDBFolder::type_e  type, const QString&  name, quint64  idParent, QSqlDatabase&  db) { return wrappedObj->addFolderToDb(type, name, idParent, db);}
    static ::IDBFolder * createFolderByType(IDBFolder* wrappedObj, QSqlDatabase & db, int  type, quint64  id, QTreeWidgetItem * parent) { return wrappedObj->createFolderByType(db, type, id, parent);}
    static QString getNameEx(IDBFolder* wrappedObj, const QString&  dbName, quint64  id) { return wrappedObj->getNameEx(dbName, id);}
    void updateItemsOnWks(IDBFolder* wrappedObj) { return wrappedObj->updateItemsOnWks();}
    virtual bool search(IDBFolder* wrappedObj, const QString&  str, QSqlQuery&  query) { return wrappedObj->search(str, query);}
    bool isSiblingFrom(IDBFolder* wrappedObj, ::IDBFolder *  folder) { return wrappedObj->isSiblingFrom(folder);}
    void exportToGpx(IDBFolder* wrappedObj) { return wrappedObj->exportToGpx();}
}; 

#endif