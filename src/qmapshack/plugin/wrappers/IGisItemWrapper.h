/**********************************************************************************************

This file was autogenerated by src/qmapshack/plugin/wrappers/createWrapper.py

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************/

#ifndef IGISITEMWRAPPER_H
#define IGISITEMWRAPPER_H

#include <qobject.h>
#include "gis/IGisItem.h"

class IScrOpt;
class IGisItem;
 using selflags_t = quint32;
class IGisProject;
class IGisItem;
 using selflags_t = quint32;


class IGisItemWrapper : public QObject
 {
    Q_OBJECT
public slots:
    static void init(IGisItem* wrappedObj) { return wrappedObj->init();}
    static QMenu * getColorMenu(IGisItem* wrappedObj, const QString & title, QObject * obj, const char * slot, QWidget *  parent) { return wrappedObj->getColorMenu(title, obj, slot, parent);}
    static qint32 selectColor(IGisItem* wrappedObj, QWidget *  parent) { return wrappedObj->selectColor(parent);}
    virtual void updateFromDB(IGisItem* wrappedObj, quint64  id, QSqlDatabase&  db) { return wrappedObj->updateFromDB(id, db);}
    virtual void updateDecoration(IGisItem* wrappedObj, quint32  enable, quint32  disable) { return wrappedObj->updateDecoration(enable, disable);}
    virtual void save(IGisItem* wrappedObj, QDomNode&  gpx, bool  strictGpx11) { return wrappedObj->save(gpx, strictGpx11);}
    const IGisItem::key_t& getKey(IGisItem* wrappedObj) { return wrappedObj->getKey();}
    const QString& getHash(IGisItem* wrappedObj) { return wrappedObj->getHash();}
    const QString& getLastDatabaseHash(IGisItem* wrappedObj) { return wrappedObj->getLastDatabaseHash();}
    void setLastDatabaseHash(IGisItem* wrappedObj, quint64  id, QSqlDatabase&  db) { return wrappedObj->setLastDatabaseHash(id, db);}
    void setIcon(IGisItem* wrappedObj, const QPixmap &  icon) { return wrappedObj->setIcon(icon);}
    const QPixmap& getIcon(IGisItem* wrappedObj) { return wrappedObj->getIcon();}
    const QPixmap& getDisplayIcon(IGisItem* wrappedObj) { return wrappedObj->getDisplayIcon();}
    virtual QString getNameEx(IGisItem* wrappedObj) { return wrappedObj->getNameEx();}
    virtual QString getInfo(IGisItem* wrappedObj, quint32  features) { return wrappedObj->getInfo(features);}
    virtual QDateTime getTimestamp(IGisItem* wrappedObj) { return wrappedObj->getTimestamp();}
    virtual void setComment(IGisItem* wrappedObj, const QString&  str) { return wrappedObj->setComment(str);}
    virtual void setDescription(IGisItem* wrappedObj, const QString&  str) { return wrappedObj->setDescription(str);}
    virtual void edit(IGisItem* wrappedObj) { return wrappedObj->edit();}
    virtual IScrOpt* getScreenOptions(IGisItem* wrappedObj, const QPoint&  origin, IMouse *  mouse) { return wrappedObj->getScreenOptions(origin, mouse);}
    virtual QPointF getPointCloseBy(IGisItem* wrappedObj, const QPoint&  point) { return wrappedObj->getPointCloseBy(point);}
    virtual bool isCloseTo(IGisItem* wrappedObj, const QPointF&  pos) { return wrappedObj->isCloseTo(pos);}
    virtual bool isWithin(IGisItem* wrappedObj, const QRectF&  area, selflags_t  mode) { return wrappedObj->isWithin(area, mode);}
    virtual void mouseMove(IGisItem* wrappedObj, const QPointF&  pos) { return wrappedObj->mouseMove(pos);}
    bool isReadOnly(IGisItem* wrappedObj) { return wrappedObj->isReadOnly();}
    bool isTainted(IGisItem* wrappedObj) { return wrappedObj->isTainted();}
    qint32 isOnDevice(IGisItem* wrappedObj) { return wrappedObj->isOnDevice();}
    bool isChanged(IGisItem* wrappedObj) { return wrappedObj->isChanged();}
    virtual bool setReadOnlyMode(IGisItem* wrappedObj, bool  readOnly) { return wrappedObj->setReadOnlyMode(readOnly);}
    virtual void drawItem(IGisItem* wrappedObj, QPainter&  p, const QRectF&  viewport, CGisDraw *  gis) { return wrappedObj->drawItem(p, viewport, gis);}
    virtual void drawHighlight(IGisItem* wrappedObj, QPainter&  p) { return wrappedObj->drawHighlight(p);}
    virtual void gainUserFocus(IGisItem* wrappedObj, bool  yes) { return wrappedObj->gainUserFocus(yes);}
    virtual bool hasUserFocus(IGisItem* wrappedObj) { return wrappedObj->hasUserFocus();}
    const IGisItem::history_t& getHistory(IGisItem* wrappedObj) { return wrappedObj->getHistory();}
    void loadHistory(IGisItem* wrappedObj, int  idx) { return wrappedObj->loadHistory(idx);}
    void cutHistoryAfter(IGisItem* wrappedObj) { return wrappedObj->cutHistoryAfter();}
    void cutHistoryBefore(IGisItem* wrappedObj) { return wrappedObj->cutHistoryBefore();}
    void squashHistory(IGisItem* wrappedObj) { return wrappedObj->squashHistory();}
    virtual ::IGisItem * createClone(IGisItem* wrappedObj) { return wrappedObj->createClone();}
    void setNogo(IGisItem* wrappedObj, bool  yes) { return wrappedObj->setNogo(yes);}
    bool isNogo(IGisItem* wrappedObj) { return wrappedObj->isNogo();}
    IGisProject * getParentProject(IGisItem* wrappedObj) { return wrappedObj->getParentProject();}
    static QString removeHtml(IGisItem* wrappedObj, const QString & str) { return wrappedObj->removeHtml(str);}
    static QString toLink(IGisItem* wrappedObj, bool  isReadOnly, const QString&  href, const QString&  str, const QString&  key) { return wrappedObj->toLink(isReadOnly, href, str, key);}
    static bool getNameAndProject(IGisItem* wrappedObj, QString & name, IGisProject *& project, const QString & itemtype) { return wrappedObj->getNameAndProject(name, project, itemtype);}
    static ::IGisItem * newGisItem(IGisItem* wrappedObj, quint32  type, quint64  id, QSqlDatabase&  db, IGisProject *  project) { return wrappedObj->newGisItem(type, id, db, project);}
    qreal getRating(IGisItem* wrappedObj) { return wrappedObj->getRating();}
    void setRating(IGisItem* wrappedObj, qreal  rating) { return wrappedObj->setRating(rating);}
    const QString getRatingKeywordInfo(IGisItem* wrappedObj) { return wrappedObj->getRatingKeywordInfo();}
}; 

#endif